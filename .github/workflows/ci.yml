name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  RUST_REPO: 'lihongjie0209/fast-image'

jobs:
  test:
    name: 🧪 Test on ${{ matrix.os }} with Java ${{ matrix.java }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [8, 11, 17, 21]
        
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        
      - name: ☕ Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          
      - name: 📥 Download Latest Native Libraries
        shell: bash
        run: |
          # 获取最新版本
          VERSION=$(curl -s https://api.github.com/repos/${{ env.RUST_REPO }}/releases/latest | jq -r .tag_name)
          echo "Using Rust version: $VERSION"
          
          # 创建目录
          mkdir -p src/main/resources/native
          
          # 下载所有平台的原生库
          PLATFORMS=(
            "fast_image-windows-x86_64.dll"
            "fast_image-windows-aarch64.dll" 
            "libfast_image-linux-x86_64.so"
            "libfast_image-linux-aarch64.so"
            "libfast_image-macos-x86_64.dylib"
            "libfast_image-macos-aarch64.dylib"
          )
          
          for platform in "${PLATFORMS[@]}"; do
            echo "Downloading $platform..."
            curl -L -f \
              -H "Accept: application/octet-stream" \
              -o "src/main/resources/native/$platform" \
              "https://github.com/${{ env.RUST_REPO }}/releases/download/$VERSION/$platform" \
              || echo "Warning: Failed to download $platform"
          done
          
          echo "Downloaded files:"
          find src/main/resources/native/ -type f -exec ls -la {} \;
          
      - name: 📦 Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: 🔧 Compile Project
        run: mvn clean compile test-compile
        
      - name: 🧪 Run Unit Tests
        run: mvn test
        
      - name: 📊 Run Quick Benchmark (Java 8 only)
        if: matrix.java == 8
        run: mvn exec:java@benchmark
        continue-on-error: true  # 基准测试失败不影响CI状态
        
      - name: 📦 Package JAR
        run: mvn package -DskipTests
        
      - name: 🔍 Verify JAR Contents
        shell: bash
        run: |
          echo "=== JAR Contents ==="
          jar -tf target/*.jar | head -20
          
          echo "=== Native Libraries in JAR ==="
          jar -tf target/*.jar | grep -E '\.(dll|so|dylib)$' || echo "No native libraries found"
          
  # 代码质量检查
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarCloud需要完整历史
          
      - name: ☕ Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          
      - name: 📥 Download Latest Native Libraries
        run: |
          VERSION=$(curl -s https://api.github.com/repos/${{ env.RUST_REPO }}/releases/latest | jq -r .tag_name)
          mkdir -p src/main/resources/native
          
          PLATFORMS=("fast_image-windows-x86_64.dll" "libfast_image-linux-x86_64.so" "libfast_image-macos-x86_64.dylib")
          for platform in "${PLATFORMS[@]}"; do
            curl -L -f \
              -H "Accept: application/octet-stream" \
              -o "src/main/resources/native/$platform" \
              "https://github.com/${{ env.RUST_REPO }}/releases/download/$VERSION/$platform" || true
          done
          
      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: 📦 Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: 🔍 Run SonarCloud Analysis
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=lihongjie0209_fast-image-java \
            -Dsonar.organization=lihongjie0209 \
            -Dsonar.host.url=https://sonarcloud.io
