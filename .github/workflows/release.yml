name: Release Java Library

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  FAST_IMAGE_VERSION: v0.2.1
  JAVA_VERSION: '8'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        # Remove 'v' prefix if present
        CLEAN_VERSION=${VERSION#v}
        
        echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "Release version: ${CLEAN_VERSION}"
        echo "Release tag: ${VERSION}"

  build-release:
    name: Build Release JAR
    needs: prepare-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download and setup native libraries
      run: |
        echo "Downloading fast-image native libraries version ${{ env.FAST_IMAGE_VERSION }}"
        
        # Create resources/native directory
        mkdir -p src/main/resources/native
        
        # Download the archive
        curl -L -o fast-image-all-platforms.tar.gz \
          "https://github.com/lihongjie0209/fast-image/releases/download/${{ env.FAST_IMAGE_VERSION }}/fast-image-all-platforms.tar.gz"
        
        # Extract and organize files
        tar -xzf fast-image-all-platforms.tar.gz
        
        # Copy native libraries to resources
        find . -name "*.dll" -o -name "*.so" -o -name "*.dylib" | while read file; do
          echo "Copying $file to src/main/resources/native/"
          cp "$file" src/main/resources/native/
        done
        
        # List the files that were copied
        echo "Native libraries for release:"
        ls -la src/main/resources/native/
        
    - name: Update version in pom.xml
      run: |
        # Update version in pom.xml
        sed -i "s/<version>.*-SNAPSHOT<\/version>/<version>${{ needs.prepare-release.outputs.version }}<\/version>/" pom.xml
        
        echo "Updated pom.xml version:"
        grep -A 2 -B 2 "<version>" pom.xml | head -n 5
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests
        mvn source:jar
        mvn javadoc:jar
        
    - name: Verify release artifacts
      run: |
        echo "Built artifacts:"
        ls -la target/
        
        # Verify native libraries are included
        echo "Native libraries in JAR:"
        jar -tf target/fast-image-java-${{ needs.prepare-release.outputs.version }}.jar | grep -E "\.(dll|so|dylib)$"
        
        # Get file sizes
        echo "Artifact sizes:"
        du -h target/fast-image-java-*.jar
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          target/fast-image-java-${{ needs.prepare-release.outputs.version }}.jar
          target/fast-image-java-${{ needs.prepare-release.outputs.version }}-sources.jar
          target/fast-image-java-${{ needs.prepare-release.outputs.version }}-javadoc.jar
        retention-days: 30

  test-release:
    name: Test Release on ${{ matrix.os }}
    needs: [prepare-release, build-release]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./
        
    - name: Test release JAR
      shell: bash
      run: |
        # Find the main JAR file
        JAR_FILE="fast-image-java-${{ needs.prepare-release.outputs.version }}.jar"
        
        if [ ! -f "$JAR_FILE" ]; then
          echo "JAR file not found: $JAR_FILE"
          ls -la
          exit 1
        fi
        
        echo "Testing release JAR: $JAR_FILE"
        
        # Create release test
        cat > ReleaseTest.java << 'EOF'
        import cn.lihongjie.image.FastImageUtils;
        
        public class ReleaseTest {
            public static void main(String[] args) {
                try {
                    System.out.println("=== Fast Image Java Release Test ===");
                    System.out.println("Version: ${{ needs.prepare-release.outputs.version }}");
                    System.out.println();
                    
                    System.out.println(FastImageUtils.getPlatformInfo());
                    System.out.println();
                    
                    boolean libraryWorking = FastImageUtils.testLibrary();
                    System.out.println("Library status: " + (libraryWorking ? "✓ WORKING" : "✗ FAILED"));
                    
                    if (libraryWorking) {
                        // Test compression with different quality levels
                        System.out.println("\nTesting compression methods:");
                        
                        // Create simple test data
                        byte[] testData = createTestImage();
                        System.out.println("Test image size: " + testData.length + " bytes");
                        
                        // Test different compression levels
                        byte[] high = FastImageUtils.compressHigh(testData);
                        byte[] medium = FastImageUtils.compressMedium(testData);
                        byte[] low = FastImageUtils.compressLow(testData);
                        
                        System.out.println("High quality:   " + high.length + " bytes");
                        System.out.println("Medium quality: " + medium.length + " bytes");
                        System.out.println("Low quality:    " + low.length + " bytes");
                        
                        System.out.println("\n✓ Release test PASSED");
                        System.exit(0);
                    } else {
                        System.out.println("\n✗ Release test FAILED - Library not working");
                        System.exit(1);
                    }
                } catch (Exception e) {
                    System.out.println("\n✗ Release test ERROR: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
            
            private static byte[] createTestImage() {
                // Create minimal JPEG header for testing
                return new byte[] {
                    (byte)0xFF, (byte)0xD8, (byte)0xFF, (byte)0xE0,
                    0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
                    0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00,
                    (byte)0xFF, (byte)0xD9
                };
            }
        }
        EOF
        
        # Compile and run the test
        javac -cp "$JAR_FILE" ReleaseTest.java
        java -cp ".:$JAR_FILE" ReleaseTest

  create-release:
    name: Create GitHub Release
    needs: [prepare-release, build-release, test-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./artifacts/
        
    - name: Generate release notes
      id: release-notes
      run: |
        cat > release-notes.md << EOF
        # Fast Image Java ${{ needs.prepare-release.outputs.version }}
        
        High-performance JPEG compression library with cross-platform native support.
        
        ## Features
        - ✅ Cross-platform support (Windows, Linux, macOS)
        - ✅ Multiple architectures (x86_64, aarch64)
        - ✅ High-performance native compression
        - ✅ Simple Java API
        - ✅ Quality control (30-90%)
        
        ## Supported Platforms
        - Windows x86_64 / aarch64
        - Linux x86_64 / aarch64  
        - macOS x86_64 / aarch64 (Intel & Apple Silicon)
        
        ## Usage
        \`\`\`java
        import cn.lihongjie.image.FastImageUtils;
        
        // Compress with custom quality
        byte[] imageData = Files.readAllBytes(Paths.get("image.jpg"));
        byte[] compressed = FastImageUtils.compress(imageData, 70);
        
        // Or use predefined quality levels
        byte[] high = FastImageUtils.compressHigh(imageData);     // 90% quality
        byte[] medium = FastImageUtils.compressMedium(imageData); // 60% quality
        byte[] low = FastImageUtils.compressLow(imageData);       // 30% quality
        \`\`\`
        
        ## Native Libraries
        Based on fast-image ${{ env.FAST_IMAGE_VERSION }} with native libraries included.
        
        ## Artifacts
        - \`fast-image-java-${{ needs.prepare-release.outputs.version }}.jar\` - Main library with native dependencies
        - \`fast-image-java-${{ needs.prepare-release.outputs.version }}-sources.jar\` - Source code
        - \`fast-image-java-${{ needs.prepare-release.outputs.version }}-javadoc.jar\` - API documentation
        EOF
        
        echo "release-notes-file=release-notes.md" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: Fast Image Java ${{ needs.prepare-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          artifacts/fast-image-java-${{ needs.prepare-release.outputs.version }}.jar
          artifacts/fast-image-java-${{ needs.prepare-release.outputs.version }}-sources.jar
          artifacts/fast-image-java-${{ needs.prepare-release.outputs.version }}-javadoc.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Version:** ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Tag:** ${{ needs.prepare-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Native Libraries:** ${{ env.FAST_IMAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Released Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- fast-image-java-${{ needs.prepare-release.outputs.version }}.jar" >> $GITHUB_STEP_SUMMARY
        echo "- fast-image-java-${{ needs.prepare-release.outputs.version }}-sources.jar" >> $GITHUB_STEP_SUMMARY
        echo "- fast-image-java-${{ needs.prepare-release.outputs.version }}-javadoc.jar" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Tested Platforms" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ubuntu Linux" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Windows" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS" >> $GITHUB_STEP_SUMMARY
