name: Build, Test and Release

# Permissions needed for the workflow
permissions:
  contents: write  # Required for creating releases and uploading artifacts
  packages: write  # Required if publishing to GitHub Packages
  actions: read    # Required for downloading artifacts

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0) - leave empty for build/test only'
        required: false
        default: ''

env:
  FAST_IMAGE_VERSION: v0.2.1
  JAVA_VERSION: '11'

jobs:
  # Determine if this is a release workflow
  check-release:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      version: ${{ steps.check.outputs.version }}
      tag: ${{ steps.check.outputs.tag }}
    steps:
    - name: Check if this is a release
      id: check
      run: |
        IS_RELEASE=false
        VERSION=""
        TAG=""
        
        # Check if triggered by v* tag
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          IS_RELEASE=true
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
          echo "Release triggered by tag: $TAG"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.release_version }}" ]]; then
          IS_RELEASE=true
          TAG="${{ github.event.inputs.release_version }}"
          VERSION="${TAG#v}"
          echo "Release triggered manually: $TAG"
        else
          echo "Not a release - running build and test only"
        fi
        
        echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
  download-native-libs:
    name: Download Native Libraries
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download and extract native libraries
      run: |
        echo "Downloading fast-image native libraries version ${{ env.FAST_IMAGE_VERSION }}"
        
        # Create resources/native directory
        mkdir -p src/main/resources/native
        
        # Download the archive
        curl -L -o fast-image-all-platforms.tar.gz \
          "https://github.com/lihongjie0209/fast-image/releases/download/${{ env.FAST_IMAGE_VERSION }}/fast-image-all-platforms.tar.gz"
        
        # Extract and organize files
        tar -xzf fast-image-all-platforms.tar.gz
        
        # Copy native libraries to resources
        find . -name "*.dll" -o -name "*.so" -o -name "*.dylib" | while read file; do
          echo "Copying $file to src/main/resources/native/"
          cp "$file" src/main/resources/native/
        done
        
        # List the files that were copied
        echo "Native libraries copied:"
        ls -la src/main/resources/native/
        
        # Verify we have all expected files
        expected_files=(
          "fast_image-windows-x86_64.dll"
          "fast_image-windows-aarch64.dll"
          "libfast_image-linux-x86_64.so"
          "libfast_image-linux-aarch64.so"
          "libfast_image-macos-x86_64.dylib"
          "libfast_image-macos-aarch64.dylib"
        )
        
        for file in "${expected_files[@]}"; do
          if [ -f "src/main/resources/native/$file" ]; then
            echo "✓ Found: $file"
          else
            echo "✗ Missing: $file"
            exit 1
          fi
        done
    
    - name: Upload native libraries artifact
      uses: actions/upload-artifact@v4
      with:
        name: native-libraries
        path: src/main/resources/native/
        retention-days: 1

  test-cross-platform:
    name: Test on ${{ matrix.os }}
    needs: download-native-libs
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
        include:
          - os: ubuntu-latest
            platform: linux-x86_64
          - os: windows-latest
            platform: windows-x86_64
          - os: macos-latest
            platform: macos-aarch64
          - os: macos-13
            platform: macos-x86_64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: native-libraries
        path: src/main/resources/native/
        
    - name: Verify native libraries
      shell: bash
      run: |
        echo "Checking native libraries in src/main/resources/native/:"
        ls -la src/main/resources/native/ || true
        
        # Check if the expected library for this platform exists
        case "${{ matrix.platform }}" in
          "linux-x86_64")
            expected_lib="libfast_image-linux-x86_64.so"
            ;;
          "windows-x86_64")
            expected_lib="fast_image-windows-x86_64.dll"
            ;;
          "macos-aarch64")
            expected_lib="libfast_image-macos-aarch64.dylib"
            ;;
          "macos-x86_64")
            expected_lib="libfast_image-macos-x86_64.dylib"
            ;;
        esac
        
        if [ -f "src/main/resources/native/$expected_lib" ]; then
          echo "✓ Expected library found: $expected_lib"
          file "src/main/resources/native/$expected_lib" || true
        else
          echo "✗ Expected library missing: $expected_lib"
          exit 1
        fi
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run platform-specific tests
      run: |
        mvn clean test -Dtest=FastImageUtilsTest -DfailIfNoTests=false
      
    - name: Run cross-platform functionality test
      run: |
        mvn clean test -Dtest=CrossPlatformTest -DfailIfNoTests=false

  build-jar:
    name: Build JAR with Native Libraries
    needs: [check-release, download-native-libs, test-cross-platform]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: native-libraries
        path: src/main/resources/native/
        
    - name: Update version for release
      if: needs.check-release.outputs.is_release == 'true'
      run: |
        # Update version in pom.xml
        sed -i "s/<version>.*-SNAPSHOT<\/version>/<version>${{ needs.check-release.outputs.version }}<\/version>/" pom.xml
        
        echo "Updated pom.xml version:"
        grep -A 2 -B 2 "<version>" pom.xml | head -n 5
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build JAR
      run: |
        mvn clean package -DskipTests
        
        # For release, also build sources and javadoc
        if [ "${{ needs.check-release.outputs.is_release }}" = "true" ]; then
          mvn source:jar
          mvn javadoc:jar
        fi
        
    - name: Verify JAR contents
      run: |
        echo "Checking JAR contents..."
        jar -tf target/fast-image-java-*.jar | grep -E "\.(dll|so|dylib)$" || true
        
        echo "JAR file info:"
        ls -la target/fast-image-java-*.jar
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: fast-image-java-jar
        path: target/fast-image-java-*.jar
        retention-days: 30
        
    - name: Upload release artifacts (if release)
      if: needs.check-release.outputs.is_release == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          target/fast-image-java-${{ needs.check-release.outputs.version }}.jar
          target/fast-image-java-${{ needs.check-release.outputs.version }}-sources.jar
          target/fast-image-java-${{ needs.check-release.outputs.version }}-javadoc.jar
        retention-days: 30

  integration-test:
    name: Integration Test on ${{ matrix.os }}
    needs: build-jar
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download JAR
      uses: actions/download-artifact@v4
      with:
        name: fast-image-java-jar
        path: ./
        
    - name: Test JAR functionality
      shell: bash
      run: |
        # Find the main JAR file (exclude sources and javadoc JARs)
        JAR_FILE=$(find . -name "fast-image-java-*.jar" | grep -v sources | grep -v javadoc | head -n 1)
        echo "Testing JAR: $JAR_FILE"
        
        if [ -z "$JAR_FILE" ]; then
          echo "No main JAR file found. Available files:"
          ls -la *.jar || true
          exit 1
        fi
        
        # Create a simple test
        cat > IntegrationTest.java << 'EOF'
        import cn.lihongjie.image.FastImageUtils;
        
        public class IntegrationTest {
            public static void main(String[] args) {
                try {
                    System.out.println("=== Fast Image Java Integration Test ===");
                    System.out.println(FastImageUtils.getPlatformInfo());
                    
                    boolean libraryWorking = FastImageUtils.testLibrary();
                    System.out.println("Library working: " + libraryWorking);
                    
                    if (libraryWorking) {
                        System.out.println("✓ Integration test PASSED");
                        System.exit(0);
                    } else {
                        System.out.println("✗ Integration test FAILED");
                        System.exit(1);
                    }
                } catch (Exception e) {
                    System.out.println("✗ Integration test ERROR: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }
        EOF
        
        # Compile and run the test
        javac -cp "$JAR_FILE" IntegrationTest.java
        
        # Use different classpath separator for Windows vs Unix
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          java -cp ".;$JAR_FILE" IntegrationTest
        else
          java -cp ".:$JAR_FILE" IntegrationTest
        fi

  # Release-specific jobs (only run when is_release is true)
  test-release:
    name: Test Release on ${{ matrix.os }}
    needs: [check-release, build-jar]
    if: needs.check-release.outputs.is_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./
        
    - name: Test release JAR
      shell: bash
      run: |
        # Find the main JAR file (exclude sources and javadoc JARs)
        JAR_FILE=$(find . -name "fast-image-java-*.jar" | grep -v sources | grep -v javadoc | head -n 1)
        
        if [ -z "$JAR_FILE" ]; then
          echo "No main JAR file found. Available files:"
          ls -la *.jar || true
          exit 1
        fi
        
        echo "Testing release JAR: $JAR_FILE"
        
        # Create release test
        cat > ReleaseTest.java << 'EOF'
        import cn.lihongjie.image.FastImageUtils;
        
        public class ReleaseTest {
            public static void main(String[] args) {
                try {
                    System.out.println("=== Fast Image Java Release Test ===");
                    System.out.println("Version: ${{ needs.check-release.outputs.version }}");
                    System.out.println();
                    
                    System.out.println(FastImageUtils.getPlatformInfo());
                    System.out.println();
                    
                    boolean libraryWorking = FastImageUtils.testLibrary();
                    System.out.println("Library status: " + (libraryWorking ? "✓ WORKING" : "✗ FAILED"));
                    
                    if (libraryWorking) {
                        System.out.println("\n✓ Release test PASSED");
                        System.exit(0);
                    } else {
                        System.out.println("\n✗ Release test FAILED - Library not working");
                        System.exit(1);
                    }
                } catch (Exception e) {
                    System.out.println("\n✗ Release test ERROR: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }
        EOF
        
        # Compile and run the test
        javac -cp "$JAR_FILE" ReleaseTest.java
        
        # Use different classpath separator for Windows vs Unix
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          java -cp ".;$JAR_FILE" ReleaseTest
        else
          java -cp ".:$JAR_FILE" ReleaseTest
        fi

  create-release:
    name: Create GitHub Release
    needs: [check-release, build-jar, test-release]
    if: needs.check-release.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./artifacts/
        
    - name: Generate release notes
      id: release-notes
      run: |
        cat > release-notes.md << EOF
        # Fast Image Java ${{ needs.check-release.outputs.version }}
        
        High-performance JPEG compression library with cross-platform native support.
        
        ## Features
        - ✅ Cross-platform support (Windows, Linux, macOS)
        - ✅ Multiple architectures (x86_64, aarch64)
        - ✅ High-performance native compression
        - ✅ Simple Java API
        - ✅ Quality control (30-90%)
        - ✅ Format preservation (PNG input → PNG output, JPEG input → JPEG output)
        
        ## Supported Platforms
        - Windows x86_64 / aarch64
        - Linux x86_64 / aarch64  
        - macOS x86_64 / aarch64 (Intel & Apple Silicon)
        
        ## Usage
        \`\`\`java
        import cn.lihongjie.image.FastImageUtils;
        
        // Compress with custom quality
        byte[] imageData = Files.readAllBytes(Paths.get("image.jpg"));
        byte[] compressed = FastImageUtils.compress(imageData, 70);
        
        // Or use predefined quality levels
        byte[] high = FastImageUtils.compressHigh(imageData);     // 90% quality
        byte[] medium = FastImageUtils.compressMedium(imageData); // 60% quality
        byte[] low = FastImageUtils.compressLow(imageData);       // 30% quality
        \`\`\`
        
        ## Native Libraries
        Based on fast-image ${{ env.FAST_IMAGE_VERSION }} with native libraries included.
        
        ## Artifacts
        - \`fast-image-java-${{ needs.check-release.outputs.version }}.jar\` - Main library with native dependencies
        - \`fast-image-java-${{ needs.check-release.outputs.version }}-sources.jar\` - Source code
        - \`fast-image-java-${{ needs.check-release.outputs.version }}-javadoc.jar\` - API documentation
        EOF
        
        echo "release-notes-file=release-notes.md" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.check-release.outputs.tag }}
        name: Fast Image Java ${{ needs.check-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          artifacts/fast-image-java-${{ needs.check-release.outputs.version }}.jar
          artifacts/fast-image-java-${{ needs.check-release.outputs.version }}-sources.jar
          artifacts/fast-image-java-${{ needs.check-release.outputs.version }}-javadoc.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Version:** ${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Tag:** ${{ needs.check-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Native Libraries:** ${{ env.FAST_IMAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Released Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- fast-image-java-${{ needs.check-release.outputs.version }}.jar" >> $GITHUB_STEP_SUMMARY
        echo "- fast-image-java-${{ needs.check-release.outputs.version }}-sources.jar" >> $GITHUB_STEP_SUMMARY
        echo "- fast-image-java-${{ needs.check-release.outputs.version }}-javadoc.jar" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Tested Platforms" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Ubuntu Linux" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Windows" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS" >> $GITHUB_STEP_SUMMARY

  publish-maven-central:
    name: Publish to Maven Central
    needs: [check-release, create-release]
    if: needs.check-release.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        
    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: native-libraries
        path: src/main/resources/native/
        
    - name: Update version for release
      run: |
        # Update version in pom.xml
        sed -i "s/<version>.*-SNAPSHOT<\/version>/<version>${{ needs.check-release.outputs.version }}<\/version>/" pom.xml
        
        echo "Updated pom.xml version:"
        grep -A 2 -B 2 "<version>" pom.xml | head -n 5
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
        gpg --list-secret-keys --keyid-format LONG
        
    - name: Publish to Maven Central
      env:
        MAVEN_USERNAME: ${{ secrets.CENTRAL_TOKEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.CENTRAL_TOKEN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "Publishing to Maven Central using central-publishing-maven-plugin..."
        mvn clean deploy -Prelease -Dgpg.passphrase="$GPG_PASSPHRASE"
        
    - name: Maven Central Summary
      run: |
        echo "## 📦 Maven Central Publication (Modern Plugin)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Plugin:** central-publishing-maven-plugin v0.4.0" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Group ID:** cn.lihongjie" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Artifact ID:** fast-image-java" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Version:** ${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Auto Publish:** Enabled" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Maven Central Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Maven Central Search](https://search.maven.org/artifact/cn.lihongjie/fast-image-java/${{ needs.check-release.outputs.version }}/jar)" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository Page](https://repo1.maven.org/maven2/cn/lihongjie/fast-image-java/${{ needs.check-release.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY
        echo "- [Central Portal](https://central.sonatype.com/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Maven Dependency" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`xml" >> $GITHUB_STEP_SUMMARY
        echo "<dependency>" >> $GITHUB_STEP_SUMMARY
        echo "    <groupId>cn.lihongjie</groupId>" >> $GITHUB_STEP_SUMMARY
        echo "    <artifactId>fast-image-java</artifactId>" >> $GITHUB_STEP_SUMMARY
        echo "    <version>${{ needs.check-release.outputs.version }}</version>" >> $GITHUB_STEP_SUMMARY
        echo "</dependency>" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Required Secrets" >> $GITHUB_STEP_SUMMARY
        echo "- \`CENTRAL_TOKEN_USERNAME\` - Maven Central username" >> $GITHUB_STEP_SUMMARY
        echo "- \`CENTRAL_TOKEN_PASSWORD\` - Maven Central token" >> $GITHUB_STEP_SUMMARY
        echo "- \`GPG_PRIVATE_KEY\` - GPG private key for signing" >> $GITHUB_STEP_SUMMARY
        echo "- \`GPG_PASSPHRASE\` - GPG key passphrase" >> $GITHUB_STEP_SUMMARY
